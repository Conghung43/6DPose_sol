#pragma kernel ComputeNormalizationOutTexture

Texture2D<float4> InputImage;
RWTexture2D<float4> OutputTexture; // Change to RWTexture2D
float3 Mean;
float3 Std;
uint2 TextureDimensions;

[numthreads(1, 1, 1)]
void ComputeNormalizationOutTexture(uint3 id : SV_DispatchThreadID)
{
    uint2 texCoord = id.xy;

    // Ensure texCoord is within texture dimensions
    if (texCoord.x >= TextureDimensions.x || texCoord.y >= TextureDimensions.y)
        return;
    uint yAdjust = TextureDimensions.y - texCoord.y - 1;
    float4 color = InputImage.Load(uint3(texCoord.x, yAdjust, 0)); // Load from texture

    float3 normalizedColor;
    normalizedColor.r = (color.r - Mean.x) / Std.x;
    normalizedColor.g = (color.g - Mean.y) / Std.y;
    normalizedColor.b = (color.b - Mean.z) / Std.z;

    // Write to the output texture
    OutputTexture[texCoord] = float4(normalizedColor, 1.0);
}